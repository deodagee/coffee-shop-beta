import NextAuth from 'next-auth';
import GitHubProvider from 'next-auth/providers/github';
import GoogleProvider from 'next-auth/providers/google';
import CredentialsProvider from "next-auth/providers/credentials";
import bcrypt from 'bcrypt';
import { randomBytes } from 'crypto';

const callbacks = [
  "https://127.0.0.1:3000/api/auth/callback/github",
  "https://localhost:3000/api/auth/callback/google",
  "api/auth/callback/github",
  "api/auth/callback/google",
  "https://localhost:3000/api/auth/"
];


const callbacks = [
  "http://127.0.0.1:3000/api/auth/callback/github",
  "http://localhost:3000/api/auth/callback/google",
  "api/auth/callback/github",
  "api/auth/callback/google",
  "http://localhost:3000/api/auth/"
];



const secret = randomBytes(32).toString('hex');



export default NextAuth({
  providers: [
    GitHubProvider({
      clientId: process.env.CLIENT_ID,
      clientSecret: process.env.CLIENT_SECRET,
      callbackUrl: callbacks,

    }),
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
      callbackUrl:callbacks,

    }),
    CredentialsProvider({


      name: "Credentials",

      
      credentials: {
        username: { label: "username", type: "text"},
        password: { label: "Password", type: "password"  }
      },
      async authorize(credentials, req) {



        if (!user || !bcrypt.compareSync(credentials.password, hashedPassword)) {
                  return Promise.resolve({ status: "error", error: "Invalid credentials" });
                }
        
                return Promise.resolve({ status: "success", user: { id: user.id, name: user.usernae, email: user.email } });
              }
            })
          ],
    
  
    secret: process.env.SECRET || secret,  session: {
            
    jwt: true,
  },
});

/*

const crypto = require('crypto');

const generateSecret = () => {
  return crypto.randomBytes(64).toString('hex');
};


const nextAuthSecret = process.env.NEXTAUTH_SECRET || generateSecret();
const callbacks = [
  "http://127.0.0.1:3000/api/auth/callback/github",
  "http://localhost:3000/api/auth/callback/google",
  "api/auth/callback/github",
  "api/auth/callback/google",
  "http://localhost:3000/api/auth/",
  "api/auth/callback/github",
  "api/auth/callback/github",
  "127.0.0.1:3000/login"
];

const callbacks = [
  "http://localhost:3000/api/auth/callback/google",
  "http://127.0.0.1:3000/api/auth/callback/google",
  
];
*/







------------------------------------------------


import NextAuth from 'next-auth';
import GitHubProvider from 'next-auth/providers/github';
import GoogleProvider from 'next-auth/providers/google';
import CredentialsProvider from 'next-auth/providers/credentials';
import bcrypt from 'bcrypt';

const crypto = require('crypto');

const generateSecret = () => {
  return crypto.randomBytes(64).toString('hex');
};

const nextAuthSecret = process.env.NEXTAUTH_SECRET || generateSecret();


const callbacks = [
  "http://127.0.0.1:3000/api/auth/callback/github",
  "http://localhost:3000/api/auth/callback/google",
  "api/auth/callback/github",
  "api/auth/callback/google",
  "http://localhost:3000/api/auth/",
  "api/auth/callback/github",
  "api/auth/callback/github",
];


export default NextAuth({
  providers: [

    GitHubProvider({
      clientId: process.env.CLIENT_ID,
      clientSecret: process.env.CLIENT_SECRET,
      callbackUrl: callbacks,
    }),

    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
      callbackUrl: callbacks,
    }),

    CredentialsProvider({
      name: 'Credentials',
      credentials: {
        username: { label: 'username', type: 'text', placeholder:'Unique Uername'},
        password: { label: 'Password', type: 'password', placeholder:'Unique Password'},
        email: {label: 'email', type: 'text', placeholder: 'emailname@domain.com'},
        name: {label: 'name', type: 'text', placeholder: 'Choose Your Name'}
      },
      async authorize(credentials) {
        // Fetch your user from the database based on the provided username
        const user = await getUserByUsername(credentials.username);

        if (!user || !bcrypt.compareSync(credentials.password, user.hashedPassword)) {
          return Promise.resolve({ status: 'error', error: 'Invalid credentials' });
        }

        // If the credentials are valid, return a success status along with the user data
        return Promise.resolve({
          status: 'success',
          user: { 
            password:user.password,
            username: user.username,            
            name:user.username, 
            email:user.email 
          },
        });
      },
    }),
  ],
  secret: process.env.SECRET || nextAuthSecret,
  session: {
    jwt: true,
  },
});





import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcrypt';

const prisma = new PrismaClient();
const saltRounds = 10; // Number of salt rounds for bcrypt

export default async function handler(req, res) {
  if (req.method === 'POST') {
    const { username, password } = req.body;

    try {
      // Find the user based on the provided username
      const user = await prisma.users_table.findUnique({
        where: { username },
      });

      if (!user) {
        // User with the provided username not found
        return res.status(401).json({ error: 'Invalid credentials' });
      }

      // Compare the provided password with the hashed password in the database
      const isPasswordValid = await bcrypt.compare(password, user.password);

      if (!isPasswordValid) {
        // Passwords don't match, login failed
        return res.status(401).json({ error: 'Invalid credentials' });
      }

      // Password is valid, user is authenticated
      res.status(200).json({ message: 'Login successful', user });
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: 'Something went wrong' });
    }
  } else {
    res.status(405).json({ error: 'Method not allowed' });
  }
}
